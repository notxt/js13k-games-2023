const f = (a) => ({
  arc: (c, d, b, e, g, h) => a.arc(c, d, b, e, g, h),
  arcTo: (c, d, b, e, g) => a.arcTo(c, d, b, e, g),
  beginPath: () => a.beginPath(),
  fill: () => a.fill(),
  fillRect: (c, d, b, e) => a.fillRect(c, d, b, e),
  fillStyle: (c) => (a.fillStyle = c),
  lineCap: (c) => (a.lineCap = c),
  lineTo: (c, d) => a.lineTo(c, d),
  lineWidth: (c) => (a.lineWidth = c),
  moveTo: (c, d) => a.moveTo(c, d),
  restore: () => a.restore(),
  rotate: (c) => a.rotate(c),
  save: () => a.save(),
  stroke: () => a.stroke(),
  strokeStyle: (c) => (a.strokeStyle = c),
  translate: (c, d) => a.translate(c, d),
});
const k = Math.PI,
  m = Math.sin,
  n = (a) => (c, d) => {
    for (const b of d)
      a.fillStyle("white"),
        a.save(),
        a.translate(b.x + 20 + 8, b.y - 3),
        a.fillStyle("white"),
        a.beginPath(),
        a.arc(0, 0, 10, 0, 2 * k),
        a.fill(),
        a.fillStyle("pink"),
        a.beginPath(),
        a.arc(0, 0, 8, 0, 2 * Math.PI),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20 + 20 - 5, b.y + 20 - 2),
        a.beginPath(),
        a.fillStyle("black"),
        a.rotate((-4 * k) / 6),
        a.moveTo(0, 0),
        a.lineTo(0, 10),
        a.rotate(k / 12),
        a.moveTo(0, 0),
        a.lineTo(0, 10),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x, b.y),
        a.fillRect(0, 0, 20, 20),
        a.restore(),
        a.save(),
        a.translate(b.x, b.y),
        a.fillStyle("white"),
        a.beginPath(),
        a.arc(0, 10, 10, (3 * k) / 2, k / 2, !0),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20, b.y),
        a.beginPath(),
        a.moveTo(0, 0),
        a.lineTo(0, 20),
        a.lineTo(20, 20),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20 + 20 - 5, b.y + 20 - 2),
        a.beginPath(),
        a.fillStyle("black"),
        a.rotate((3 * k) / 6),
        a.moveTo(0, 0),
        a.lineTo(0, 10),
        a.rotate(k / 12),
        a.moveTo(0, 0),
        a.lineTo(0, 10),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20 - 8, b.y - 3),
        a.fillStyle("white"),
        a.beginPath(),
        a.arc(0, 0, 10, 0, 2 * Math.PI),
        a.fill(),
        a.fillStyle("pink"),
        a.beginPath(),
        a.arc(0, 0, 8, 0, 2 * Math.PI),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20, b.y + 10),
        a.fillStyle("black"),
        a.beginPath(),
        a.arc(0, 0, 3, 0, 2 * Math.PI),
        a.fill(),
        a.fillStyle("white"),
        a.beginPath(),
        a.arc(-1, -1, 1.7, 0, 2 * Math.PI),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20 + 6, b.y + 8),
        a.fillStyle("black"),
        a.beginPath(),
        a.arc(0, 0, 3, 0, 2 * Math.PI),
        a.fill(),
        a.fillStyle("white"),
        a.beginPath(),
        a.arc(-1, -1, 1.7, 0, 2 * Math.PI),
        a.fill(),
        a.restore(),
        a.save(),
        a.translate(b.x - 10, b.y + 10),
        a.strokeStyle("pink"),
        a.lineCap("round"),
        a.lineWidth(3),
        a.beginPath(),
        a.moveTo(0, 0),
        a.arcTo(-20, 0, -20, -20, 20),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x, b.y + 20),
        (d = m(c / 60)),
        a.rotate(d),
        a.beginPath(),
        a.moveTo(0, 0),
        a.lineTo(0, 7),
        a.lineTo(0, 7),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x + 3, b.y + 20),
        a.rotate(-d),
        a.beginPath(),
        a.moveTo(0, 0),
        a.lineTo(0, 7),
        a.lineTo(0, 7),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20, b.y + 20),
        a.rotate(d),
        a.beginPath(),
        a.moveTo(0, 0),
        a.lineTo(0, 7),
        a.lineTo(0, 7),
        a.stroke(),
        a.restore(),
        a.save(),
        a.translate(b.x + 20 + 3, b.y + 20),
        a.rotate(-d),
        a.beginPath(),
        a.moveTo(0, 0),
        a.lineTo(0, 7),
        a.lineTo(0, 7),
        a.stroke(),
        a.restore();
  };
const q = (a, c) => {
  var d = p;
  return { x: d(a / 2), y: d(c / 2) };
};
const p = Math.round;
const r = document.querySelector("canvas");
if (null === r) throw Error("canvas is null");
const t = ((a) => {
  const c = a.getContext("2d");
  if (null === c) throw Error("ctx is null");
  const d = a.height,
    b = a.width,
    e = n(f(c)),
    g = [];
  a = q(b, d);
  g.push(a);
  const h = (l) => {
    console.log(b, d, l);
    c.clearRect(0, 0, b, d);
    e(l, g);
    requestAnimationFrame(h);
  };
  return h;
})(r);
requestAnimationFrame(t);
